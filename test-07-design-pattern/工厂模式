工厂模式使用情景：
凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，
第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。

实例：发送邮件和短信

共同的接口：
public interface Sender {
     //发送的方法
     public void send();
}

短信发送的类：
public class SmsSender implements Sender {

    //短信发送类实现共同接口的发送方法
    @Override
    public void send() {
        System.out.println("短信发送程序  ****  正在发送短信。。。。。。");
    }

}

邮件发送的类：
public class MailSender implements Sender {

    //邮件发送类实现共同接口的发送方法
    @Override
    public void send() {
        System.out.println("邮件发送程序  ****  正在发送邮件。。。。。。");
    }

}

## 四种工厂模式
1.普通工厂模式（一个共同的生产方法，根据传入的类型参数来创建不同的实例，如果参数有问题，则不能正常创建实例）
使用逻辑判断实现：
public class SendFactory {

    public Sender produce(String type) {
        if ("MAIL".equals(type)) {
            return new MailSender();
        } else if ("SMS".equals(type)) {
            return new SmsSender();
        } else {
            System.out.println("请输入正确的类型！");
            return null;
        }
    }

}
使用java的反射实现：
public class SendFactory {

    public Sender produce(Class c) {
        Sender sender = null;

    }

}

2.多个工厂方法模式（将上面的一个生产方法拆分成多个生产方法，每个生产方法只负责生成特定的实例对象，不需要传入参数）
public class SendFactoryMore {

    public Sender produceMail() {
        return new MailSender();
    }

    public Sender produceSms() {
        return new SmsSender();
    }

}

3.静态工厂模式（将上面的多个工厂方法模式中的方法改成静态方法，不需要创建工厂对象，可直接调用）
public class SendFactoryStatic {

    public static Sender produceMail() {
        return new MailSender();
    }

    public static Sender produceSms() {
        return new SmsSender();
    }

}

4.抽象工厂模式
# 问题：前面三种工厂模式都是利用一个工厂类来生产多种实例对象，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则
# 解决：使用抽象工厂模式，原先一个工厂类生产多种实例对象，现在创建多个工厂类，一个工厂类只生产一种实例对象，这样如果需要拓展，只需
要增加新的工厂类即可，对其他实例对象的生产不会产生影响
# 实例：前面一个工厂类生产 短信、邮件 两种实例对象，现在创建两个工厂类，一个工厂类负责生产 短信 实例，另一个工厂负责生产 邮件 实例

工厂类实现的共同接口：
public interface Provider {
    public Sender provider();
}

短信工厂类（只负责生产 短信 实例）：
public class SmsFactory implements Provider {

    @Override
    public Sender provider() {
        return new SmsSender();
    }

}

邮件工厂类（只负责生产 邮件 实例）：
public class MailFactory implements Provider{

    @Override
    public Sender provider() {
        return new MailSender();
    }

}

## 总结：使用抽象工厂模式的好处就是，如果你想再增加一个功能，这个时候你只需要写一个类实现 Sender 接口，然后再写一个工厂类实现 Provider 接口，就
可以了，不需要去改现成的代码，这样做，扩展性更好。

工厂模式测试类：
public class FactoryTest {

    //测试普通工厂模式（通过逻辑判断实现）
//    public static void main(String[] args) {
//        //创建工厂实例
//        SendFactory factory = new SendFactory();
//        //工厂生产发送短信的实例
//        Sender sms = factory.produce("SMS");
//        //使用发送短信的实例来发送短信
//        sms.send();
//        //工厂生产发送邮件的实例
//        Sender mail = factory.produce("MAIL");
//        //使用发送邮件的实例来发送短信
//        mail.send();
//    }

    //测试简单工厂模式（通过java反射实现）
//    public static void main(String[] args) {
//        //创建工厂实例
//        SendFactoryReflex factory = new SendFactoryReflex();
//        //工厂生产发送短信的实例
//        Sender sms = factory.produce(SmsSender.class);
//        //使用发送短信的实例来发送短信
//        sms.send();
//        //工厂生产发送邮件的实例
//        Sender mail = factory.produce(MailSender.class);
//        //使用发送邮件的实例来发送短信
//        mail.send();
//    }

    //测试多个工厂方法模式（相比于普通工厂模式而言，多个工厂方法模式每个生产方法针对一个实例，不需要传参，不会有参数错误，无法创建实例的问题）
//    public static void main(String[] args) {
//        //创建工厂实例
//        SendFactoryMore factory = new SendFactoryMore();
//        //工厂生产发送短信的实例
//        Sender sms = factory.produceSms();
//        //使用发送短信的实例来发送短信
//        sms.send();
//        //工厂生产发送邮件的实例
//        Sender mail = factory.produceMail();
//        //使用发送邮件的实例来发送短信
//        mail.send();
//    }

    //测试静态工厂模式（静态工厂模式中的方法是静态的，可以直接调用，不需要创建工厂对象）
//    public static void main(String[] args) {
//        //工厂生产发送短信的实例
//        Sender sms = SendFactoryStatic.produceSms();
//        //使用发送短信的实例来发送短信
//        sms.send();
//        //工厂生产发送邮件的实例
//        Sender mail = SendFactoryStatic.produceMail();
//        //使用发送邮件的实例来发送短信
//        mail.send();
//    }

    //测试抽象工厂模式
    public static void main(String[] args) {
        //创建短信工厂对象
        SmsFactory smsFactory = new SmsFactory();
        //调用短信工厂对象的 provider() 方法生产 短信 实例对象
        Sender sms = smsFactory.provider();
        //调用短信实例的 send() 方法发送短信
        sms.send();
        //创建邮件工厂对象
        MailFactory mailFactory = new MailFactory();
        //调用邮件工厂对象的 provider() 方法生产 邮件 实例对象
        Sender mail = mailFactory.provider();
        //调用邮件实例的 send() 方法发送邮件
        mail.send();
    }

}